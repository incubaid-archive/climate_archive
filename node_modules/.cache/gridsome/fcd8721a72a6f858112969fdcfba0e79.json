{"remainingRequest":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/src/pages/Blog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/src/pages/Blog.vue","mtime":1658143774000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":["\r\nimport PostListItem from \"~/components/custom/Cards/PostListItem.vue\";\r\nimport Pagination from \"~/components/custom/Pagination.vue\";\r\nimport NewsFilterHeader from \"~/components/custom/NewsFilterHeader.vue\";\r\n\r\nexport default {\r\n  data() {\r\n    const allMonths = [\r\n      \"All Months\",\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const currYear = new Date().getFullYear();\r\n    var years = [\"All Years\"];\r\n    var r = this.range(2019, currYear);\r\n    r.forEach((year) => years.push(String(year)));\r\n\r\n    return {\r\n      selectedTopic: \"All Topics\",\r\n      selectedYear: \"All Years\",\r\n      selectedMonth: \"All Months\",\r\n      months: allMonths,\r\n      years: years,\r\n      listArchive: false,\r\n      archiveButtonText: \"Archive\",\r\n    };\r\n  },\r\n\r\n  metaInfo: {\r\n    title: \"Blog\",\r\n  },\r\n  components: {\r\n    PostListItem,\r\n    Pagination,\r\n    NewsFilterHeader,\r\n  },\r\n  methods: {\r\n    setTopic: function (topic) {\r\n      this.selectedTopic = topic;\r\n    },\r\n    setYear(year) {\r\n      this.selectedYear = year;\r\n    },\r\n    setMonth(month) {\r\n      this.selectedMonth = month;\r\n    },\r\n    resetAll() {\r\n      this.selectedTopic = \"All Topics\";\r\n      this.selectedYear = \"All Years\";\r\n      this.selectedMonth = \"All Months\";\r\n    },\r\n    range(start, end, step) {\r\n      var range = [];\r\n      var typeofStart = typeof start;\r\n      var typeofEnd = typeof end;\r\n\r\n      if (step === 0) {\r\n        throw TypeError(\"Step cannot be zero.\");\r\n      }\r\n\r\n      if (typeofStart == \"undefined\" || typeofEnd == \"undefined\") {\r\n        throw TypeError(\"Must pass start and end arguments.\");\r\n      } else if (typeofStart != typeofEnd) {\r\n        throw TypeError(\"Start and end arguments must be of same type.\");\r\n      }\r\n\r\n      typeof step == \"undefined\" && (step = 1);\r\n\r\n      if (end < start) {\r\n        step = -step;\r\n      }\r\n\r\n      if (typeofStart == \"number\") {\r\n        while (step > 0 ? end >= start : end <= start) {\r\n          range.push(start);\r\n          start += step;\r\n        }\r\n      } else if (typeofStart == \"string\") {\r\n        if (start.length != 1 || end.length != 1) {\r\n          throw TypeError(\"Only strings with one character are supported.\");\r\n        }\r\n\r\n        start = start.charCodeAt(0);\r\n        end = end.charCodeAt(0);\r\n\r\n        while (step > 0 ? end >= start : end <= start) {\r\n          range.push(String.fromCharCode(start));\r\n          start += step;\r\n        }\r\n      } else {\r\n        throw TypeError(\"Only string and number types are supported\");\r\n      }\r\n\r\n      return range;\r\n    },\r\n  },\r\n  computed: {\r\n    topics: function () {\r\n      var res = [\"All Topics\"];\r\n      this.$page.topics.edges.forEach((edge) => res.push(edge.node.title));\r\n      return res;\r\n    },\r\n    contentHeight() {\r\n      if (process.isClient) {\r\n        return window.innerHeight - 100;\r\n      }\r\n    },\r\n\r\n    blogs() {\r\n      var res = {};\r\n      var old = this.$page.entries;\r\n      res.totalCount = old.totalCount;\r\n      res.pageInfo = old.pageInfo;\r\n      res.edges = [];\r\n\r\n      for (var i = 0; i < old.edges.length; i++) {\r\n        var node = old.edges[i].node;\r\n\r\n        // Now check topic\r\n        var topics = [\"All Topics\"];\r\n        node.tags.forEach((tag) => topics.push(tag.title));\r\n\r\n        var nodeDate = new Date(node.datetime);\r\n        if (!topics.includes(this.selectedTopic)) continue;\r\n\r\n        // Check year\r\n        var years = [\"All Years\", String(nodeDate.getFullYear())];\r\n\r\n        if (!years.includes(this.selectedYear)) continue;\r\n\r\n        // Check Month\r\n        var months = [\"All Months\", this.months[nodeDate.getMonth() + 1]];\r\n        if (!months.includes(this.selectedMonth)) continue;\r\n        res.edges.push({ node: node, id: node.id });\r\n      }\r\n      return res;\r\n    },\r\n    baseurl() {\r\n      return \"/blog/\";\r\n    },\r\n  },\r\n};\r\n",{"version":3,"sources":["Blog.vue"],"names":[],"mappings":";AAkfile":"Blog.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n  <Layout>\r\n    <NewsFilterHeader\r\n      @selectedTopic=\"setTopic\"\r\n      @selectedYear=\"setYear\"\r\n      @selectedMonth=\"setMonth\"\r\n      @resetAll=\"resetAll\"\r\n      :topics=\"topics\"\r\n      :years=\"years\"\r\n      :months=\"months\"\r\n    />\r\n    <div\r\n      class=\"container sm:pxi-0 mx-auto mt-8\"\r\n      :style=\"{ 'min-height': contentHeight + 'px' }\"\r\n    >\r\n      <div class=\"flex flex-wrap news pt-12 mt-8 pb-8 mx-4 sm:-mx-4\">\r\n        <PostListItem\r\n          v-for=\"post in blogs.edges\"\r\n          :key=\"post.node.id\"\r\n          :record=\"post.node\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"pagination flex justify-center mb-8\">\r\n        <Pagination\r\n          :baseUrl=\"baseurl\"\r\n          :currentPage=\"blogs.pageInfo.currentPage\"\r\n          :totalPages=\"blogs.pageInfo.totalPages\"\r\n          :maxVisibleButtons=\"5\"\r\n          v-if=\"blogs.pageInfo.totalPages > 1 && blogs.edges.length > 0\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </Layout>\r\n</template>\r\n<page-query>\r\n\r\nquery($page: Int){\r\n  entries: allBlog(perPage: 10, page: $page, sortBy: \"created\", order: DESC, filter: {category: { id: {in: [\"farming\"]}}}) @paginate{\r\n    totalCount\r\n    pageInfo {\r\n      totalPages\r\n      currentPage\r\n    }\r\n    edges {\r\n      node {\r\n        title\r\n        tags{\r\n          id\r\n          title\r\n          path\r\n        }\r\n        excerpt\r\n        category{\r\n          id\r\n          title\r\n        }\r\n        image(width:800)\r\n        path\r\n        humanTime : created(format:\"DD MMM YYYY\")\r\n        datetime : created\r\n        authors {\r\n          id\r\n          name\r\n          image(width:64, height:64, fit:inside)\r\n          path\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n   topics:  allBlogTag{\r\n    edges{\r\n      node{\r\n\t\t\t\ttitle        \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n</page-query>\r\n<script>\r\nimport PostListItem from \"~/components/custom/Cards/PostListItem.vue\";\r\nimport Pagination from \"~/components/custom/Pagination.vue\";\r\nimport NewsFilterHeader from \"~/components/custom/NewsFilterHeader.vue\";\r\n\r\nexport default {\r\n  data() {\r\n    const allMonths = [\r\n      \"All Months\",\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const currYear = new Date().getFullYear();\r\n    var years = [\"All Years\"];\r\n    var r = this.range(2019, currYear);\r\n    r.forEach((year) => years.push(String(year)));\r\n\r\n    return {\r\n      selectedTopic: \"All Topics\",\r\n      selectedYear: \"All Years\",\r\n      selectedMonth: \"All Months\",\r\n      months: allMonths,\r\n      years: years,\r\n      listArchive: false,\r\n      archiveButtonText: \"Archive\",\r\n    };\r\n  },\r\n\r\n  metaInfo: {\r\n    title: \"Blog\",\r\n  },\r\n  components: {\r\n    PostListItem,\r\n    Pagination,\r\n    NewsFilterHeader,\r\n  },\r\n  methods: {\r\n    setTopic: function (topic) {\r\n      this.selectedTopic = topic;\r\n    },\r\n    setYear(year) {\r\n      this.selectedYear = year;\r\n    },\r\n    setMonth(month) {\r\n      this.selectedMonth = month;\r\n    },\r\n    resetAll() {\r\n      this.selectedTopic = \"All Topics\";\r\n      this.selectedYear = \"All Years\";\r\n      this.selectedMonth = \"All Months\";\r\n    },\r\n    range(start, end, step) {\r\n      var range = [];\r\n      var typeofStart = typeof start;\r\n      var typeofEnd = typeof end;\r\n\r\n      if (step === 0) {\r\n        throw TypeError(\"Step cannot be zero.\");\r\n      }\r\n\r\n      if (typeofStart == \"undefined\" || typeofEnd == \"undefined\") {\r\n        throw TypeError(\"Must pass start and end arguments.\");\r\n      } else if (typeofStart != typeofEnd) {\r\n        throw TypeError(\"Start and end arguments must be of same type.\");\r\n      }\r\n\r\n      typeof step == \"undefined\" && (step = 1);\r\n\r\n      if (end < start) {\r\n        step = -step;\r\n      }\r\n\r\n      if (typeofStart == \"number\") {\r\n        while (step > 0 ? end >= start : end <= start) {\r\n          range.push(start);\r\n          start += step;\r\n        }\r\n      } else if (typeofStart == \"string\") {\r\n        if (start.length != 1 || end.length != 1) {\r\n          throw TypeError(\"Only strings with one character are supported.\");\r\n        }\r\n\r\n        start = start.charCodeAt(0);\r\n        end = end.charCodeAt(0);\r\n\r\n        while (step > 0 ? end >= start : end <= start) {\r\n          range.push(String.fromCharCode(start));\r\n          start += step;\r\n        }\r\n      } else {\r\n        throw TypeError(\"Only string and number types are supported\");\r\n      }\r\n\r\n      return range;\r\n    },\r\n  },\r\n  computed: {\r\n    topics: function () {\r\n      var res = [\"All Topics\"];\r\n      this.$page.topics.edges.forEach((edge) => res.push(edge.node.title));\r\n      return res;\r\n    },\r\n    contentHeight() {\r\n      if (process.isClient) {\r\n        return window.innerHeight - 100;\r\n      }\r\n    },\r\n\r\n    blogs() {\r\n      var res = {};\r\n      var old = this.$page.entries;\r\n      res.totalCount = old.totalCount;\r\n      res.pageInfo = old.pageInfo;\r\n      res.edges = [];\r\n\r\n      for (var i = 0; i < old.edges.length; i++) {\r\n        var node = old.edges[i].node;\r\n\r\n        // Now check topic\r\n        var topics = [\"All Topics\"];\r\n        node.tags.forEach((tag) => topics.push(tag.title));\r\n\r\n        var nodeDate = new Date(node.datetime);\r\n        if (!topics.includes(this.selectedTopic)) continue;\r\n\r\n        // Check year\r\n        var years = [\"All Years\", String(nodeDate.getFullYear())];\r\n\r\n        if (!years.includes(this.selectedYear)) continue;\r\n\r\n        // Check Month\r\n        var months = [\"All Months\", this.months[nodeDate.getMonth() + 1]];\r\n        if (!months.includes(this.selectedMonth)) continue;\r\n        res.edges.push({ node: node, id: node.id });\r\n      }\r\n      return res;\r\n    },\r\n    baseurl() {\r\n      return \"/blog/\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]}]}