{"remainingRequest":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/babel-loader/lib/index.js??ref--1-1!/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/gridsome-plugin-flexsearch/gridsome.client.js","dependencies":[{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/gridsome-plugin-flexsearch/gridsome.client.js","mtime":499162500000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import FlexSearch from 'flexsearch';\nimport cjson from 'compressed-json';\nimport pMap from 'p-map';\nexport default async function (Vue, options, {\n  isClient,\n  router\n}) {\n  const {\n    flexsearch,\n    chunk = false,\n    compress = false,\n    autoFetch = true,\n    autoSetup = true,\n    searchFields,\n    pathPrefix,\n    siteUrl\n  } = options;\n\n  if (isClient) {\n    const basePath = pathPrefix && (process.env.NODE_ENV !== 'development' || location.origin === siteUrl) ? `${pathPrefix}/flexsearch` : '/flexsearch'; // Data fetch functions\n\n    const loadNormalMode = async search => {\n      let searchIndex = await fetch(`${basePath}.json`).then(r => r.json());\n      if (compress) searchIndex = cjson.decompress(searchIndex);\n      search.import(searchIndex, {\n        serialize: false\n      });\n    };\n\n    const loadChunkMode = async search => {\n      const {\n        index,\n        docs\n      } = await fetch(`${basePath}/manifest.json`).then(r => r.json());\n\n      const fetchData = id => fetch(`${basePath}/${id}.json`).then(r => r.json()).then(j => compress ? cjson.decompress(j) : j);\n\n      const searchIndex = await pMap(index, fetchData);\n      search.import(searchIndex, {\n        index: true,\n        doc: false,\n        serialize: false\n      });\n      let searchDocs = {};\n\n      for await (const id of docs) {\n        const data = await fetchData(id);\n        searchDocs = { ...searchDocs,\n          ...Object.fromEntries(data)\n        };\n      }\n\n      search.import([searchDocs], {\n        index: false,\n        doc: true,\n        serialize: false\n      });\n    }; // Manually setup the Flexsearch instance\n\n\n    if (!autoSetup) {\n      Vue.prototype.$flexsearch = {\n        flexsearch: { ...flexsearch,\n          doc: {\n            id: 'id',\n            field: searchFields\n          }\n        },\n        basePath,\n        loadIndex: loadNormalMode\n      };\n      return;\n    } // Setup global Flexsearch Instance\n\n\n    const search = new FlexSearch({ ...flexsearch,\n      doc: {\n        id: 'id',\n        field: searchFields\n      }\n    });\n    Vue.prototype.$search = search;\n    Vue.prototype.$searchOptions = {\n      basePath\n    };\n    if (!autoFetch) return;\n\n    if (typeof autoFetch === 'string' || typeof autoFetch === 'object') {\n      let loaded = false;\n      const pathsToLoad = typeof autoFetch === 'string' ? [autoFetch] : autoFetch;\n      return router.afterEach(({\n        path: currentPath\n      }) => {\n        if (pathsToLoad.includes(currentPath) && !loaded) {\n          loaded = true;\n          return chunk ? loadChunkMode(search) : loadNormalMode(search);\n        }\n      });\n    } else if (chunk) return loadChunkMode(search);else return loadNormalMode(search);\n  }\n}",{"version":3,"names":["FlexSearch","cjson","pMap","Vue","options","isClient","router","flexsearch","chunk","compress","autoFetch","autoSetup","searchFields","pathPrefix","siteUrl","basePath","process","env","NODE_ENV","location","origin","loadNormalMode","search","searchIndex","fetch","then","r","json","decompress","import","serialize","loadChunkMode","index","docs","fetchData","id","j","doc","searchDocs","data","Object","fromEntries","prototype","$flexsearch","field","loadIndex","$search","$searchOptions","loaded","pathsToLoad","afterEach","path","currentPath","includes"],"sources":["/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/gridsome-plugin-flexsearch/gridsome.client.js"],"sourcesContent":["import FlexSearch from 'flexsearch'\nimport cjson from 'compressed-json'\nimport pMap from 'p-map'\n\nexport default async function (Vue, options, { isClient, router }) {\n  const { flexsearch, chunk = false, compress = false, autoFetch = true, autoSetup = true, searchFields, pathPrefix, siteUrl } = options\n\n  if (isClient) {\n    const basePath = pathPrefix && (process.env.NODE_ENV !== 'development' || location.origin === siteUrl) ? `${pathPrefix}/flexsearch` : '/flexsearch'\n\n    // Data fetch functions\n    const loadNormalMode = async search => {\n      let searchIndex = await fetch(`${basePath}.json`).then(r => r.json())\n      if (compress) searchIndex = cjson.decompress(searchIndex)\n      search.import(searchIndex, { serialize: false })\n    }\n\n    const loadChunkMode = async search => {\n      const { index, docs } = await fetch(`${basePath}/manifest.json`).then(r => r.json())\n      const fetchData = id => fetch(`${basePath}/${id}.json`).then(r => r.json()).then(j => compress ? cjson.decompress(j) : j)\n\n      const searchIndex = await pMap(index, fetchData)\n      search.import(searchIndex, { index: true, doc: false, serialize: false })\n\n      let searchDocs = {}\n      for await (const id of docs) {\n        const data = await fetchData(id)\n        searchDocs = { ...searchDocs, ...Object.fromEntries(data) }\n      }\n      search.import([searchDocs], { index: false, doc: true, serialize: false })\n    }\n\n    // Manually setup the Flexsearch instance\n    if (!autoSetup) {\n      Vue.prototype.$flexsearch = {\n        flexsearch: {\n          ...flexsearch,\n          doc: {\n            id: 'id',\n            field: searchFields\n          }\n        },\n        basePath,\n        loadIndex: loadNormalMode\n      }\n      return\n    }\n\n    // Setup global Flexsearch Instance\n    const search = new FlexSearch({\n      ...flexsearch,\n      doc: {\n        id: 'id',\n        field: searchFields\n      }\n    })\n    Vue.prototype.$search = search\n    Vue.prototype.$searchOptions = { basePath }\n\n    if (!autoFetch) return\n\n    if (typeof autoFetch === 'string' || typeof autoFetch === 'object') {\n      let loaded = false\n      const pathsToLoad = typeof autoFetch === 'string' ? [autoFetch] : autoFetch\n      return router.afterEach(({ path: currentPath }) => {\n        if (pathsToLoad.includes(currentPath) && !loaded) {\n          loaded = true\n          return chunk ? loadChunkMode(search) : loadNormalMode(search)\n        }\n      })\n    } else if (chunk) return loadChunkMode(search)\n    else return loadNormalMode(search)\n  }\n}\n"],"mappings":"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"}]}