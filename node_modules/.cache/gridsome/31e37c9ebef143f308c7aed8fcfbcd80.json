{"remainingRequest":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/babel-loader/lib/index.js??ref--1-1!/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/src/pages/Blog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/src/pages/Blog.vue","mtime":1658143774000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ehab/codewww/github/threefoldfoundation/www_climate_action_project/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":["import \"core-js/modules/es.error.cause.js\";\nimport PostListItem from \"~/components/custom/Cards/PostListItem.vue\";\nimport Pagination from \"~/components/custom/Pagination.vue\";\nimport NewsFilterHeader from \"~/components/custom/NewsFilterHeader.vue\";\nexport default {\n  data() {\n    const allMonths = [\"All Months\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const currYear = new Date().getFullYear();\n    var years = [\"All Years\"];\n    var r = this.range(2019, currYear);\n    r.forEach(year => years.push(String(year)));\n    return {\n      selectedTopic: \"All Topics\",\n      selectedYear: \"All Years\",\n      selectedMonth: \"All Months\",\n      months: allMonths,\n      years: years,\n      listArchive: false,\n      archiveButtonText: \"Archive\"\n    };\n  },\n\n  metaInfo: {\n    title: \"Blog\"\n  },\n  components: {\n    PostListItem,\n    Pagination,\n    NewsFilterHeader\n  },\n  methods: {\n    setTopic: function (topic) {\n      this.selectedTopic = topic;\n    },\n\n    setYear(year) {\n      this.selectedYear = year;\n    },\n\n    setMonth(month) {\n      this.selectedMonth = month;\n    },\n\n    resetAll() {\n      this.selectedTopic = \"All Topics\";\n      this.selectedYear = \"All Years\";\n      this.selectedMonth = \"All Months\";\n    },\n\n    range(start, end, step) {\n      var range = [];\n      var typeofStart = typeof start;\n      var typeofEnd = typeof end;\n\n      if (step === 0) {\n        throw TypeError(\"Step cannot be zero.\");\n      }\n\n      if (typeofStart == \"undefined\" || typeofEnd == \"undefined\") {\n        throw TypeError(\"Must pass start and end arguments.\");\n      } else if (typeofStart != typeofEnd) {\n        throw TypeError(\"Start and end arguments must be of same type.\");\n      }\n\n      typeof step == \"undefined\" && (step = 1);\n\n      if (end < start) {\n        step = -step;\n      }\n\n      if (typeofStart == \"number\") {\n        while (step > 0 ? end >= start : end <= start) {\n          range.push(start);\n          start += step;\n        }\n      } else if (typeofStart == \"string\") {\n        if (start.length != 1 || end.length != 1) {\n          throw TypeError(\"Only strings with one character are supported.\");\n        }\n\n        start = start.charCodeAt(0);\n        end = end.charCodeAt(0);\n\n        while (step > 0 ? end >= start : end <= start) {\n          range.push(String.fromCharCode(start));\n          start += step;\n        }\n      } else {\n        throw TypeError(\"Only string and number types are supported\");\n      }\n\n      return range;\n    }\n\n  },\n  computed: {\n    topics: function () {\n      var res = [\"All Topics\"];\n      this.$page.topics.edges.forEach(edge => res.push(edge.node.title));\n      return res;\n    },\n\n    contentHeight() {\n      if (process.isClient) {\n        return window.innerHeight - 100;\n      }\n    },\n\n    blogs() {\n      var res = {};\n      var old = this.$page.entries;\n      res.totalCount = old.totalCount;\n      res.pageInfo = old.pageInfo;\n      res.edges = [];\n\n      for (var i = 0; i < old.edges.length; i++) {\n        var node = old.edges[i].node; // Now check topic\n\n        var topics = [\"All Topics\"];\n        node.tags.forEach(tag => topics.push(tag.title));\n        var nodeDate = new Date(node.datetime);\n        if (!topics.includes(this.selectedTopic)) continue; // Check year\n\n        var years = [\"All Years\", String(nodeDate.getFullYear())];\n        if (!years.includes(this.selectedYear)) continue; // Check Month\n\n        var months = [\"All Months\", this.months[nodeDate.getMonth() + 1]];\n        if (!months.includes(this.selectedMonth)) continue;\n        res.edges.push({\n          node: node,\n          id: node.id\n        });\n      }\n\n      return res;\n    },\n\n    baseurl() {\n      return \"/blog/\";\n    }\n\n  }\n};",null]}